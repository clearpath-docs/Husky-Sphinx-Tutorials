Interfacing with Husky
=========================  

Both simulated and real Husky robots expose the same ROS interface, and can be interacted with in the same way. Please make sure that the desktop packages for Husky are installed:

.. code:: bash

	$ sudo apt-get install ros-indigo-husky-desktop

Visualization
--------------

You may start a preconfigured `rviz <http://wiki.ros.org/rviz>`_ instance using the following command:

.. code:: bash

	$ roslaunch husky_viz view_robot.launch

Control
--------

There are three quick ways to send your Husky control commands:

1.  Using the provided Logitech gamepad. The left analog stick controls the velocity and turn rate, while the 'A' and 'X' button activate the regular and extra speed modes, respectively.

2.  Using the rviz instance above. If you select the Interact option in the top toolbar, an interactive marker will appear around the Husky and can be used to control speed.

3.  The `rqt_robot_steering plugin <http://wiki.ros.org/rqt_robot_steering>`_. Run the rqt command, and select **Plugins->Robot Tools->Robot Steering** from the top menu.  

Husky uses `twist_mux <http://wiki.ros.org/twist_mux>`_ to mix four separate `geometry_msgs\/Twist <http://docs.ros.org/api/geometry_msgs/html/msg/Twist.html>`_ control channels into the ``husky_velocity_controller/cmd_vel topic``.

These channels are (in order of decreasing priotity):

.. raw:: html

	<div class="wy-table-responsive">
	<table border="1" class="docutils">
	<col width="25%">
	<col width="25%">
	<thead valign="bottom">
	  <tr class="row-odd">
	    <th class="head">Topic</th>
	    <th class="head">Description</th>
	    <th class="head">Priority</th>
	  </tr>
	 </thead>
	 <tbody valign="top">
	  <tr class="row-even">
	    <td>joy_teleop/cmd_vel</td>
	    <td>Joystick teleop input</td>
	    <td>10</td>
	  </tr>
	  <tr class="row-odd">
	    <td>twist_marker_server/cmd_vel</td>
	    <td>Interactive marker teleop input</td>
	    <td>8</td>
	  </tr>
	  <tr class="row-even">
	    <td>move_base/cmd_vel</td>
	    <td>Autonomous movement input, for the,husky_navigation samples</td>
	    <td>2</td>
	  </tr>
	  <tr class="row-odd">
	    <td>cmd_vel</td>
	    <td>Miscellaneous external input</td>
	    <td>1</td>
	  </tr>
	  </tbody>
	</table>

Additional velocity channels can be defined in `twist_mux\.yaml <https://github.com/husky/husky_control/blob/indigo-devel/config/twist_mux.yaml>`_, or can be piped into the lowest-priority cmd_vel topic.

Odometry
---------

Husky publishes odometry information on the odometry/filtered topic, as `nav_msgs/Odometry messages <http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html>`_. These are generated by `ekf_localization_node <http://wiki.ros.org/robot_localization>`_, which processes data from several sensor sources using an Extended Kalman filter (EKF). This includes data from the wheel encoders and IMU (if available).

.. raw:: html

	<div class="wy-table-responsive">
	<table border="1" class="docutils">
	<col width="25%">
	<col width="75%">
	<thead valign="bottom">
	  <tr class="row-odd">
	    <th class="head">Topic</th>
	    <th class="head">Sources</th>
	    <th class="head">Description</th>
	  </tr>
	 </thead>
	 <tbody valign="top">
	  <tr class="row-even">
	    <td>husky_velocity_controller/odom</td>
	    <td>husky_node</td>
	    <td>Raw odometry as read from Husky encoders</td>
	  </tr>
	  <tr class="row-odd">
	    <td>imu/data</td>
	    <td>mu_filter_madgwick</td>
	    <td>Orientation estimate from the IMU</td>
	  </tr>
	  <tr class="row-even">
	    <td>odometry/filtered</td>
	    <td>ekf_localization_node</td>
	    <td>Fused odometry estimate (encoders and IMU)</td>
	  </tr>
	  </tbody>
	</table>
	</div>

Additional odometry information sources can be added to the EKF in `localization\.yaml <https://github.com/husky/husky_control/blob/indigo-devel/config/twist_mux.yaml>`_.

Diagnostics
------------

(Non-simulated only)

Husky provides hardware and software system `diagnostics <http://wiki.ros.org/diagnostics>`_ on the ROS standard /diagnostics topic. The best way to view these messages is using the `rqt_runtime_monitor <http://wiki.ros.org/rqt_runtime_monitor>`_ plugin. Run the rqt command, and select **Plugins->Robot Tools->Runtime Monitor** from the top menu.

The same information is also published as a `husky_msgs\/HuskyStatus <http://docs.ros.org/api/husky_msgs/html/msg/HuskyStatus.html>`_ message on the status topic.
